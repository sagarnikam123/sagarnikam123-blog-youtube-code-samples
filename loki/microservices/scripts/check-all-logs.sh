#!/bin/bash
set -e

# Check for help flag
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    echo "üîç Component Log Analysis Script"
    echo ""
    echo "üìã DESCRIPTION:"
    echo "  Automated log collection and analysis for all Loki distributed"
    echo "  microservices components. Provides quick overview of component"
    echo "  health through log inspection."
    echo ""
    echo "‚öôÔ∏è  FUNCTIONALITY:"
    echo "  ‚Ä¢ Display current pod status"
    echo "  ‚Ä¢ Collect logs from all Loki components"
    echo "  ‚Ä¢ Show logs from supporting services"
    echo "  ‚Ä¢ Highlight key health indicators"
    echo ""
    echo "üöÄ USAGE:"
    echo "  ./scripts/check-all-logs.sh        # Check all component logs"
    echo "  ./scripts/check-all-logs.sh --help # Show this help"
    echo ""
    echo "üìã ANALYZED COMPONENTS:"
    echo "  ‚Ä¢ Loki: distributor, ingester, querier, query-frontend"
    echo "  ‚Ä¢ Loki: query-scheduler, compactor, ruler, index-gateway"
    echo "  ‚Ä¢ Supporting: MinIO, Fluent Bit, Grafana, Prometheus"
    echo ""
    echo "üîç HEALTH INDICATORS:"
    echo "  ‚Ä¢ Distributor: 'memberlist cluster succeeded'"
    echo "  ‚Ä¢ Ingester: 'checkpoint done', 'uploading tables'"
    echo "  ‚Ä¢ Fluent Bit: 'flush chunk succeeded'"
    echo "  ‚Ä¢ General: Error patterns and startup messages"
    echo ""
    echo "üì¶ REQUIREMENTS:"
    echo "  ‚Ä¢ kubectl configured and accessible"
    echo "  ‚Ä¢ Loki namespace with deployed components"
    echo "  ‚Ä¢ Standard Kubernetes labels applied"
    echo ""
    echo "üéØ USE CASES:"
    echo "  ‚Ä¢ Quick health assessment"
    echo "  ‚Ä¢ Troubleshooting component issues"
    echo "  ‚Ä¢ Monitoring deployment status"
    echo "  ‚Ä¢ Log aggregation for analysis"
    exit 0
fi

echo "üîç Checking All Loki Component Logs"
echo "===================================="

# Get all pod names first
echo "üìä Current Pod Status:"
kubectl get pods -n loki

echo ""
echo "üìã Component Log Analysis:"
echo ""

# Check each component individually
echo "üì° DISTRIBUTOR LOGS:"
kubectl logs -n loki -l app=loki-distributor --tail=10 2>/dev/null || echo "  ‚ùå No distributor pods found"

echo ""
echo "üìä INGESTER LOGS:"
kubectl logs -n loki loki-ingester-0 --tail=10 2>/dev/null || echo "  ‚ùå Ingester not found"

echo ""
echo "üîç QUERIER LOGS:"
kubectl logs -n loki -l app=loki-querier --tail=10 2>/dev/null || echo "  ‚ùå No querier pods found"

echo ""
echo "üéØ QUERY-FRONTEND LOGS:"
kubectl logs -n loki -l app=loki-query-frontend --tail=10 2>/dev/null || echo "  ‚ùå No query-frontend pods found"

echo ""
echo "üìÖ QUERY-SCHEDULER LOGS:"
kubectl logs -n loki -l app=loki-query-scheduler --tail=10 2>/dev/null || echo "  ‚ùå No query-scheduler pods found"

echo ""
echo "üóúÔ∏è COMPACTOR LOGS:"
kubectl logs -n loki -l app=loki-compactor --tail=10 2>/dev/null || echo "  ‚ùå No compactor pods found"

echo ""
echo "üìè RULER LOGS:"
kubectl logs -n loki -l app=loki-ruler --tail=10 2>/dev/null || echo "  ‚ùå No ruler pods found"

echo ""
echo "üèõÔ∏è INDEX-GATEWAY LOGS:"
kubectl logs -n loki -l app=loki-index-gateway --tail=10 2>/dev/null || echo "  ‚ùå No index-gateway pods found"

echo ""
echo "üóÑÔ∏è MINIO LOGS:"
kubectl logs -n loki -l app=minio --tail=10 2>/dev/null || echo "  ‚ùå MinIO not found"

echo ""
echo "üìù FLUENT BIT LOGS:"
kubectl logs -n loki -l app=fluent-bit --tail=10 2>/dev/null || echo "  ‚ùå No fluent-bit pods found"

echo ""
echo "üìà GRAFANA LOGS:"
kubectl logs -n loki -l app=grafana --tail=10 2>/dev/null || echo "  ‚ùå Grafana not found"

echo ""
echo "üìâ PROMETHEUS LOGS:"
kubectl logs -n loki -l app=prometheus --tail=10 2>/dev/null || echo "  ‚ùå Prometheus not found"

echo ""
echo "‚úÖ Log check complete!"
echo ""
echo "üîç Health Indicators to Look For:"
echo "  ‚Ä¢ Distributor: 'memberlist cluster succeeded'"
echo "  ‚Ä¢ Ingester: 'checkpoint done', 'uploading tables'"
echo "  ‚Ä¢ Querier: 'query readiness setup completed'"
echo "  ‚Ä¢ Query-Frontend: 'Loki started'"
echo "  ‚Ä¢ Compactor: 'compactor started'"
echo "  ‚Ä¢ Fluent Bit: 'flush chunk succeeded'"
echo "  ‚Ä¢ Grafana: 'HTTP Server Listen'"
echo "  ‚Ä¢ Prometheus: 'Server is ready to receive web requests'"
