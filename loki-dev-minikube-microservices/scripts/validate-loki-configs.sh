#!/bin/bash
set -e

# Check for help flag
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    echo "üîç Loki Configuration Validation Script"
    echo ""
    echo "üìã DESCRIPTION:"
    echo "  Validates all Loki component configurations using Loki's built-in"
    echo "  dry-run validation. Ensures configurations are syntactically correct"
    echo "  and compatible with the target Loki version."
    echo ""
    echo "‚öôÔ∏è  FUNCTIONALITY:"
    echo "  ‚Ä¢ Extract current Loki version from deployment script"
    echo "  ‚Ä¢ Validate each component configuration using Docker"
    echo "  ‚Ä¢ Report validation results and summary"
    echo "  ‚Ä¢ Exit with error code if any validation fails"
    echo ""
    echo "üöÄ USAGE:"
    echo "  ./scripts/validate-loki-configs.sh        # Validate all configs"
    echo "  ./scripts/validate-loki-configs.sh --help # Show this help"
    echo ""
    echo "üìã VALIDATED COMPONENTS:"
    echo "  ‚Ä¢ distributor     ‚Ä¢ ingester       ‚Ä¢ querier"
    echo "  ‚Ä¢ query-frontend  ‚Ä¢ query-scheduler ‚Ä¢ compactor"
    echo "  ‚Ä¢ ruler          ‚Ä¢ index-gateway"
    echo ""
    echo "üì¶ REQUIREMENTS:"
    echo "  ‚Ä¢ Docker installed and running"
    echo "  ‚Ä¢ Loki configuration files in k8s/loki/configs/"
    echo "  ‚Ä¢ run-on-minikube.sh with LOKI_VERSION defined"
    echo ""
    echo "üéØ USE CASES:"
    echo "  ‚Ä¢ Pre-deployment configuration validation"
    echo "  ‚Ä¢ Troubleshooting configuration issues"
    echo "  ‚Ä¢ CI/CD pipeline validation steps"
    echo "  ‚Ä¢ Development configuration testing"
    exit 0
fi

# Extract Loki version from deployment script
LOKI_VERSION=$(grep "^export LOKI_VERSION=" ./run-on-minikube.sh | cut -d'"' -f2)

echo "üîç Validating Loki ${LOKI_VERSION} Configurations"

# Components to validate
COMPONENTS=(
    "distributor"
    "ingester"
    "querier"
    "query-frontend"
    "query-scheduler"
    "compactor"
    "ruler"
    "index-gateway"
)

echo "üìã Using Loki's built-in dry-run validation..."
echo ""

VALID_COUNT=0
TOTAL_COUNT=${#COMPONENTS[@]}

for component in "${COMPONENTS[@]}"; do
    echo "Validating $component..."
    
    if docker run --rm -v "$(pwd)/k8s/loki/configs:/config" grafana/loki:${LOKI_VERSION} \
        -config.file="/config/${component}.yaml" -verify-config -target="$component" 2>/dev/null; then
        echo "   ‚úÖ $component config is valid"
        VALID_COUNT=$((VALID_COUNT + 1))
    else
        echo "   ‚ùå $component config has errors"
        echo "   Running detailed validation:"
        docker run --rm -v "$(pwd)/k8s/loki/configs:/config" grafana/loki:${LOKI_VERSION} \
            -config.file="/config/${component}.yaml" -verify-config -target="$component"
    fi
    echo ""
done

echo "üìä Validation Summary:"
echo "   Valid configs: $VALID_COUNT/$TOTAL_COUNT"

if [[ $VALID_COUNT -eq $TOTAL_COUNT ]]; then
    echo "   üéâ All configurations are valid!"
    echo "   ‚úÖ Ready for deployment"
    exit 0
else
    echo "   ‚ö†Ô∏è  Some configurations need fixing"
    exit 1
fi